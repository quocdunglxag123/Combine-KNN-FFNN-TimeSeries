# Form implementation generated from reading ui file 'KLTN_qtDesigner.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
from numpy import sqrt 
import time

#Tien Xu Ly
from sklearn.preprocessing import MinMaxScaler

#Draw Flot
import matplotlib.pyplot as plt

#Cacuale error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error

#distance Libaray
from dtw import dtw
from scipy.spatial.distance import euclidean

#FFNN Libarary
from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from sklearn.model_selection import GridSearchCV
from keras.wrappers.scikit_learn import KerasRegressor

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox
import sys
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import os


class Ui_MainWindow(object):
    flagTest_global= False
    nameModel_global=''
    nameData_global=''
    X_train_global=[]
    y_train_global=[]
    X_test_global=[]
    y_test_global=[] 
    size_window_global = ''
    percentTrain_global = ''

    k_global =''
    distance_type_global =''

    batchSize_global =''  
    epoch_global =''
    hiddenLayer_global =''
    neuralHidden_global ='' 
    typeTrain_global = ''
    best_params_FFNN_global =''
    
    timeTrain_global=0
    timeTest_global=0
    totalTime_global=0

    # Train
    def plotOnTrain(self):
        # Declare global
        global nameModel_global
        global nameData_global
        global size_window_global
        global percentTrain_global

        global X_train_global
        global y_train_global
        global X_test_global
        global y_test_global
        
        global k_global
        global distance_type_global
        
        global batchSize_global 
        global epoch_global
        global hiddenLayer_global 
        global neuralHidden_global 
        global typeTrain_global
        global best_params_FFNN_global
        global timeTrain_global 
        global totalTime_global 

        #get Input
        nameModel= self.comboBox_model.currentText()
        nameData= self.comboBox_csv.currentText()
        percentDataset = self.comboBox_percenttrain.currentText()
        size_window = self.line_sizewindow.text()

        k = self.line_k.text()
        distanceType= self.comboBox_distancetype.currentText()

        batchSize = self.line_batchsize.text()
        epoch = self.line_epoch.text()
        hiddenLayer = self.line_hiddenlayer.text()
        neuralHidden = self.line_neuralhidden.text()

        #Check Empty Input
        if(nameModel == ''):
            Ui_MainWindow.message(self,"Please Choose Model!")
            return
        if(nameData == ''):
            Ui_MainWindow.message(self,"Please Choose CSV!")
            return
        if(percentDataset == ''):
            Ui_MainWindow.message(self,"Please Declare Percent Train!")
            return
        if(size_window == ''):
            Ui_MainWindow.message(self,"Please Declare Size Window!")
            return 
        
        # Process Type Input  
        size_window = int(float(size_window))
        if(percentDataset == '80 : 20'):
            percentTrain = 80
        else:
            percentTrain = 70
            
        # check Valid Input
        if(size_window <1 or size_window>100):
            Ui_MainWindow.message(self,"Please Declare Size Window > 0 and Size Window < 100 !")
            return
        if(percentTrain < 0 or percentTrain> 99):
            Ui_MainWindow.message(self,"Please Declare Percent Train > 0 and Percent Train < 100!")
            return

        # process Data
        filePath= '../Dataset/'+nameData+'.csv'
        size_predict=1
        stepWindow=1
        timeSeries = Ui_MainWindow.readData(filePath)
        timeSeries = Ui_MainWindow.cleanData(timeSeries)
        train_data, test_data = Ui_MainWindow.splitData(timeSeries, percentTrain)
        
        X_train, y_train = Ui_MainWindow.prepare_data(train_data.values, size_window, size_predict, stepWindow)
        X_test, y_test =   Ui_MainWindow.prepare_data(test_data.values, size_window, size_predict, stepWindow)
        
        percentTrain_global = percentTrain
        nameModel_global= nameModel
        nameData_global = nameData
        size_window_global = size_window
        X_train_global= X_train
        y_train_global= y_train
        X_test_global = X_test
        y_test_global = y_test
        best_params_FFNN = ''
        
        #check model To Train
        if(nameModel == 'K-Nearest Neighbours'):
            if(k == ''):
                Ui_MainWindow.message(self,"Please Declare K!")
                return
            if(distanceType == ''):
                Ui_MainWindow.message(self,"Please Select Distance Type!")
                return
            
            k_global = int(float(k))
            distance_type_global = distanceType
        
        elif(nameModel == 'Feedforward neural network'):      
            if(hiddenLayer == ''):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer!")
                return
            if(neuralHidden == ''):
                Ui_MainWindow.message(self,"Please Declare Neural Hidden!")
                return
            hiddenLayer = int(float(hiddenLayer))
            neuralHidden = int(float(neuralHidden))
            if(hiddenLayer < 0 or hiddenLayer> 99):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer > 0 and Hidden Layer < 100!")
                return
            if(neuralHidden < 0 or neuralHidden> 99):
                Ui_MainWindow.message(self,"Please Declare Number Neural Hidden Layer > 0 and Number Neural Hidden Layer < 100!")
                return
            
            hiddenLayer_global = hiddenLayer
            neuralHidden_global = neuralHidden
            typeTrain = 'FFNN'
            typeTrain_global = typeTrain
            
            path_FFNN =''
            if(batchSize != '' and epoch != ''):
                batchSize_global = int(float(batchSize))
                epoch_global = int(float(epoch))
                path_FFNN ='BestParam_QtDesigner/'+str(typeTrain)+'/'+nameData+'/'+str(int(percentTrain))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData+'.h5'
            
            start_Train= time.time()
            if(path_FFNN!=''):
                if(Ui_MainWindow.isFileExisted(self,path_FFNN)):
                    if(not Ui_MainWindow.messageLoadFile(self, typeTrain)):
                        Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, size_window, X_train, y_train, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)
                else:
                    Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, size_window, X_train, y_train, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)

            else:
                best_params_FFNN =Ui_MainWindow.train_FFNN(nameData, typeTrain, size_window, X_train, y_train, neuralHidden_global, hiddenLayer_global, size_predict)                
                self.line_batchsize.setText(str(best_params_FFNN['batch_size']))
                self.line_epoch.setText(str(best_params_FFNN['epochs']))
            
            best_params_FFNN_global = best_params_FFNN

            end_Train = time.time()
            timeTrain_global = end_Train - start_Train
        
        elif(nameModel == 'Lai GhÃ©p Song Song'):
            typeTrain = 'SongSong'

            # Check Param Input KNN
            if(k == ''):
                Ui_MainWindow.message(self,"Please Declare K!")
                return
            if(distanceType == ''):
                Ui_MainWindow.message(self,"Please Select Distance Type!")
                return
            
            k_global = int(float(k))
            distance_type_global = distanceType

            # Check Param Input FFNN
            if(hiddenLayer == ''):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer!")
                return
            if(neuralHidden == ''):
                Ui_MainWindow.message(self,"Please Declare Neural Hidden!")
                return
            hiddenLayer = int(float(hiddenLayer))
            neuralHidden = int(float(neuralHidden))
            if(hiddenLayer < 0 or hiddenLayer> 99):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer > 0 and Hidden Layer < 100!")
                return
            if(neuralHidden < 0 or neuralHidden> 99):
                Ui_MainWindow.message(self,"Please Declare Number Neural Hidden Layer > 0 and Number Neural Hidden Layer < 100!")
                return
            
            hiddenLayer_global = hiddenLayer
            neuralHidden_global = neuralHidden
            typeTrain_global = typeTrain
            
            path_LaiGhep_FFNN =''                
            if(batchSize != '' and epoch != ''):
                batchSize_global = int(float(batchSize))
                epoch_global = int(float(epoch))
                path_LaiGhep_FFNN ='BestParam_QtDesigner/'+str(typeTrain)+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData+'.h5'
            
            start_Train= time.time()
            if(path_LaiGhep_FFNN!=''):
                if(Ui_MainWindow.isFileExisted(self,path_LaiGhep_FFNN)):
                    if(not Ui_MainWindow.messageLoadFile(self, nameModel+' MÃ´ HÃ¬nh FFNN')):
                        Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, size_window, X_train, y_train, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)
                else:
                    Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, size_window, X_train, y_train, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)
            else:
                best_params_FFNN =Ui_MainWindow.train_FFNN(nameData, typeTrain, size_window, X_train, y_train, neuralHidden_global, hiddenLayer_global, size_predict)                
                self.line_batchsize.setText(str(best_params_FFNN['batch_size']))
                self.line_epoch.setText(str(best_params_FFNN['epochs']))
            
            best_params_FFNN_global = best_params_FFNN

            end_Train = time.time()
            timeTrain_global = end_Train - start_Train
        
        elif(nameModel == 'Lai GhÃ©p Tuáº§n Tá»±'):
            typeTrain = 'TuanTu'
        
            # Check Param Input KNN
            if(k == ''):
                Ui_MainWindow.message(self,"Please Declare K!")
                return
            if(distanceType == ''):
                Ui_MainWindow.message(self,"Please Select Distance Type!")
                return
            
            k_global = int(float(k))
            distance_type_global = distanceType

            # Check Param Input FFNN
            if(hiddenLayer == ''):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer!")
                return
            if(neuralHidden == ''):
                Ui_MainWindow.message(self,"Please Declare Neural Hidden!")
                return
            hiddenLayer = int(float(hiddenLayer))
            neuralHidden= int(float(neuralHidden))
            if(hiddenLayer < 0 or hiddenLayer> 99):
                Ui_MainWindow.message(self,"Please Declare Hidden Layer > 0 and Hidden Layer < 100!")
                return
            if(neuralHidden < 0 or neuralHidden> 99):
                Ui_MainWindow.message(self,"Please Declare Number Neural Hidden Layer > 0 and Number Neural Hidden Layer < 100!")
                return
            
            hiddenLayer_global = hiddenLayer
            neuralHidden_global = neuralHidden
            typeTrain_global = typeTrain
            
            path_LaiGhep_FFNN =''                
            if(batchSize != '' and epoch != ''):
                batchSize_global = int(float(batchSize))
                epoch_global = int(float(epoch))
                path_LaiGhep_FFNN ='BestParam_QtDesigner/'+str(typeTrain)+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData+'.h5'
            
            X_train_mse, y_train_mse = Ui_MainWindow.prepare_data(train_data.values, 1, size_predict, stepWindow)
            X_test_mse, y_test_mse =   Ui_MainWindow.prepare_data(test_data.values, 1, size_predict, stepWindow)
            start_Train= time.time()
            
            if(path_LaiGhep_FFNN!=''):
                if(Ui_MainWindow.isFileExisted(self,path_LaiGhep_FFNN)):
                    if(not Ui_MainWindow.messageLoadFile(self, nameModel+' MÃ´ HÃ¬nh FFNN')):
                        Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, 1, X_train_mse, y_train_mse, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)
                else:
                    Ui_MainWindow.train_best_param_FFNN(nameData, typeTrain, 1, X_train_mse, y_train_mse, batchSize_global, epoch_global, neuralHidden_global, hiddenLayer_global, size_predict)
            else:
                best_params_FFNN =Ui_MainWindow.train_FFNN(nameData, typeTrain, 1, X_train_mse, y_train_mse, neuralHidden_global, hiddenLayer_global, size_predict)                
                
                self.line_batchsize.setText(str(best_params_FFNN['batch_size']))
                self.line_epoch.setText(str(best_params_FFNN['epochs']))
            
            best_params_FFNN_global = best_params_FFNN

            end_Train = time.time()
            timeTrain_global = end_Train - start_Train

        self.Button_test.setEnabled(True)


    # Dá»± ÄoÃ¡n
    def plotOnTest(self):
        try:
            if(nameModel_global ==''):
                temp=1
        except:
            Ui_MainWindow.plotOnTrain(self)    

        self.figure.clear()
        self.canvas_plotpredict.draw()
        # check model to predict
        if(nameModel_global == 'K-Nearest Neighbours'):
            Ui_MainWindow.plotOnTrain(self)
            start_KNN= time.time()
            path_KNN ='BestParam_QtDesigner/KNN/'+nameData_global+'/KNN_'+distance_type_global+'_Find_K/'+str(int(percentTrain_global))+'_Train_'+str(size_window_global)+'_SizeWindow_'+str(k_global)+'_K_'+nameData_global+'.txt'
            if(Ui_MainWindow.isFileExisted(self,path_KNN)):
                if(Ui_MainWindow.messageLoadFile(self, nameModel_global)):
                    y_pred_KNN = np.loadtxt(path_KNN)
                else:
                    y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
            else:
                y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
            end_KNN = time.time()
            np.savetxt(path_KNN, y_pred_KNN)    

            self.line_mseresult.setText(str(round(mean_squared_error(y_test_global , y_pred_KNN),16)))
            self.line_rmseresult.setText(str(round(sqrt(mean_squared_error(y_test_global, y_pred_KNN)),12)))
            self.line_maeresult.setText(str(round(mean_absolute_error(y_test_global,y_pred_KNN),10)))
            self.line_maperesult.setText(str(round(mean_absolute_percentage_error(y_test_global, y_pred_KNN),10)))
            
            self.line_timetestresult.setText(str(round(end_KNN-start_KNN,5)))
            self.line_timetrainresult.setText('0')
            self.line_totaltime.setText(str(round(end_KNN-start_KNN,5)))

            plt.title("Biá»u Äá» Dá»± ÄoÃ¡n KNN Vá»i Äá» Äo  "+distance_type_global+" TrÃªn Táº­p Dá»¯ Liá»u "+nameData_global)
            plt.plot(y_test_global, label=nameData_global+' Actual Stock')
            plt.plot(y_pred_KNN, label=nameData_global+' Prediction Stock')
            plt.xlabel("NgÃ y")
            plt.ylabel("GiÃ¡ Cá» Phiáº¿u")
            plt.legend()  
            
        elif(nameModel_global == 'Feedforward neural network'):      
            start_Test_FFNN= time.time()
            if(best_params_FFNN_global == ''):
                best_param = {'batch_size': batchSize_global,
                'epochs': epoch_global,
                'neuralHidden': neuralHidden_global,
                'num_layers_hidden' : hiddenLayer_global,
                'neuralInput' : size_window_global,
                'neuralOutput' : 1}
            
                path_FFNN ='BestParam_QtDesigner/'+str(typeTrain_global)+'/'+nameData_global+'/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData_global+'.h5'
                if(Ui_MainWindow.isFileExisted(self,path_FFNN)):
                    predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, X_test_global, best_param)
                else:
                    Ui_MainWindow.message(self,"Please Train First!")
                    return
            else:
                predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, X_test_global, best_params_FFNN_global)

            end_Test_FFNN = time.time()
            
            self.line_mseresult.setText(str(round(mean_squared_error(y_test_global , predictions_FFNN),16)))
            self.line_rmseresult.setText(str(round(sqrt(mean_squared_error(y_test_global, predictions_FFNN)),12)))
            self.line_maeresult.setText(str(round(mean_absolute_error(y_test_global,predictions_FFNN),10)))
            self.line_maperesult.setText(str(round(mean_absolute_percentage_error(y_test_global, predictions_FFNN),10)))
            
            timeTrain = timeTrain_global
            timeTest = end_Test_FFNN -  start_Test_FFNN
            totalTime = timeTrain+ timeTest

            self.line_timetestresult.setText(str(round(end_Test_FFNN-start_Test_FFNN,5)))
            self.line_timetrainresult.setText(str(round(timeTrain,5)))
            self.line_totaltime.setText(str(round(totalTime,5)))

            plt.title("Biá»u Äá» Dá»± ÄoÃ¡n FFNN TrÃªn Táº­p Dá»¯ Liá»u "+nameData_global)
            plt.plot(y_test_global, label=nameData_global+' Actual Stock')
            plt.plot(predictions_FFNN, label=nameData_global+' Prediction Stock')

            plt.xlabel("NgÃ y")
            plt.ylabel("GiÃ¡ Cá» Phiáº¿u")
            plt.legend()
            self.Button_test.setEnabled(False)
        
        elif(nameModel_global == 'Lai GhÃ©p Song Song'):
            start_KNN= time.time()
            path_KNN ='BestParam_QtDesigner/SongSong/'+nameData_global+'/KNN_Predict_BestK/'+str(int(percentTrain_global))+'_Train_'+str(size_window_global)+'_SizeWindow_'+str(k_global)+'_K_'+nameData_global+'.txt'
            if(Ui_MainWindow.isFileExisted(self,path_KNN)):
                if(Ui_MainWindow.messageLoadFile(self, nameModel_global + ' MÃ´ HÃ¬nh KNN')):
                    y_pred_KNN = np.loadtxt(path_KNN)
                else:
                    y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
                    np.savetxt(path_KNN, y_pred_KNN)    
            else:
                y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
                np.savetxt(path_KNN, y_pred_KNN)    

            end_KNN = time.time()

            start_Test_FFNN= time.time()
            if(best_params_FFNN_global == ''):
                best_param = {'batch_size': batchSize_global,
                'epochs': epoch_global,
                'neuralHidden': neuralHidden_global,
                'num_layers_hidden' : hiddenLayer_global,
                'neuralInput' : size_window_global,
                'neuralOutput' : 1}
            
                path_FFNN ='BestParam_QtDesigner/'+str(typeTrain_global)+'/'+nameData_global+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData_global+'.h5'
                if(Ui_MainWindow.isFileExisted(self,path_FFNN)):
                    predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, X_test_global, best_param)
                else:
                    Ui_MainWindow.message(self,"Please Train First!")
                    return
            else:
                predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, X_test_global, best_params_FFNN_global)
            end_Test_FFNN = time.time()

            start_hybrid = time.time()
            y_pred_hybrid = Ui_MainWindow.predictHybrid(predictions_FFNN,y_pred_KNN,y_test_global)
            end_hybrid = time.time()

            timeTrainFFNN = timeTrain_global
            timeTestFFNN = end_Test_FFNN -  start_Test_FFNN
            timeFFNN = timeTrainFFNN + timeTestFFNN
            timeKNN = end_KNN-start_KNN
            timeSongSong = end_hybrid - start_hybrid
            
            self.line_timetestresult.setText(str(round(max(timeKNN,timeTestFFNN),5)))
            self.line_timetrainresult.setText(str(round(timeTrainFFNN,5)))
            self.line_totaltime.setText(str(round(max(timeFFNN,timeKNN)+ timeSongSong,5)))
            
            self.line_mseresult.setText(str(round(mean_squared_error(y_test_global , y_pred_hybrid),16)))
            self.line_rmseresult.setText(str(round(sqrt(mean_squared_error(y_test_global, y_pred_hybrid)),12)))
            self.line_maeresult.setText(str(round(mean_absolute_error(y_test_global,y_pred_hybrid),10)))
            self.line_maperesult.setText(str(round(mean_absolute_percentage_error(y_test_global, y_pred_hybrid),10)))
            
            plt.title("Biá»u Äá» Dá»± ÄoÃ¡n Lai GhÃ©p Song Song TrÃªn Táº­p Dá»¯ Liá»u "+nameData_global)
            plt.plot(y_test_global, label=nameData_global+' Actual Stock')
            plt.plot(y_pred_hybrid, label=nameData_global+' Prediction Stock')

            plt.xlabel("NgÃ y")
            plt.ylabel("GiÃ¡ Cá» Phiáº¿u")
            plt.legend()

            self.Button_test.setEnabled(False)
        elif(nameModel_global == 'Lai GhÃ©p Tuáº§n Tá»±'):
            start_KNN= time.time()
            path_KNN ='BestParam_QtDesigner/TuanTu/'+nameData_global+'/KNN_Predict_BestK/'+str(int(percentTrain_global))+'_Train_'+str(size_window_global)+'_SizeWindow_'+str(k_global)+'_K_'+nameData_global+'.txt'
            if(Ui_MainWindow.isFileExisted(self,path_KNN)):
                if(Ui_MainWindow.messageLoadFile(self, nameModel_global + ' MÃ´ HÃ¬nh KNN')):
                    y_pred_KNN = np.loadtxt(path_KNN)
                else:
                    y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
                    np.savetxt(path_KNN, y_pred_KNN)    
            else:
                y_pred_KNN= Ui_MainWindow.predict_KNN(k_global, distance_type_global, size_window_global, X_train_global, y_train_global, X_test_global, y_test_global)
                np.savetxt(path_KNN, y_pred_KNN)    
            end_KNN = time.time()
            
            mseDay = Ui_MainWindow.mseWithDay(y_pred_KNN, y_test_global)

            start_Test_FFNN= time.time()
            if(best_params_FFNN_global == ''):
                best_param = {'batch_size': batchSize_global,
                'epochs': epoch_global,
                'neuralHidden': neuralHidden_global,
                'num_layers_hidden' : hiddenLayer_global,
                'neuralInput' : 1,
                'neuralOutput' : 1}
            
                path_FFNN ='BestParam_QtDesigner/'+str(typeTrain_global)+'/'+nameData_global+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(hiddenLayer_global))+'_HiddenLayer_'+str(int(neuralHidden_global))+'_NeuralHidden_'+str(int(batchSize_global))+'_BatchSize_'+str(int(epoch_global))+'_Epoch_'+nameData_global+'.h5'
                if(Ui_MainWindow.isFileExisted(self,path_FFNN)):
                    predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, mseDay, best_param)
                else:
                    Ui_MainWindow.message(self,"Please Train First!")
                    return
            else:
                predictions_FFNN= Ui_MainWindow.predict_FFNN(nameData_global, typeTrain_global, mseDay, best_params_FFNN_global)
            end_Test_FFNN = time.time()

            start_sum = time.time()
            y_pred_sum = Ui_MainWindow.predictSum(predictions_FFNN,y_pred_KNN)
            end_sum = time.time()

            timeTrainFFNN = timeTrain_global
            timeTestFFNN = end_Test_FFNN -  start_Test_FFNN
            timeFFNN = timeTrainFFNN + timeTestFFNN
            timeKNN = end_KNN-start_KNN
            timeTuanTu = end_sum - start_sum
            
            self.line_timetestresult.setText(str(round(timeKNN+timeTestFFNN,5)))
            self.line_timetrainresult.setText(str(round(timeTrainFFNN,5)))
            self.line_totaltime.setText(str(round(timeFFNN+timeKNN+ timeTuanTu,5)))
            
            self.line_mseresult.setText(str(round(mean_squared_error(y_test_global , y_pred_sum),16)))
            self.line_rmseresult.setText(str(round(sqrt(mean_squared_error(y_test_global, y_pred_sum)),12)))
            self.line_maeresult.setText(str(round(mean_absolute_error(y_test_global,y_pred_sum),10)))
            self.line_maperesult.setText(str(round(mean_absolute_percentage_error(y_test_global, y_pred_sum),10)))
            
            plt.title("Biá»u Äá» Dá»± ÄoÃ¡n Lai GhÃ©p Tuáº§n Tá»± TrÃªn Táº­p Dá»¯ Liá»u "+nameData_global)
            plt.plot(y_test_global, label=nameData_global+' Actual Stock')
            plt.plot(y_pred_sum, label=nameData_global+' Prediction Stock')

            plt.xlabel("NgÃ y")
            plt.ylabel("GiÃ¡ Cá» Phiáº¿u")
            plt.legend()

            self.Button_test.setEnabled(False)


        self.canvas_plotpredict.draw()

    def clearAll(self):
        global nameModel_global
        global nameData_global
        global size_window_global
        global X_train_global
        global y_train_global
        global X_test_global
        global y_test_global
        
        global k_global
        global distance_type_global
        
        global batchSize_global 
        global epoch_global
        global hiddenLayer_global 
        global neuralHidden_global 
        global typeTrain_global
        global best_params_FFNN_global

        global timeTrain_global 
        global totalTime_global 
        
        X_train_global=[]
        y_train_global=[]
        X_test_global=[]
        y_test_global=[] 
        size_window_global = ''
        k_global =''
        distance_type_global =''

        batchSize_global =''  
        epoch_global =''
        hiddenLayer_global =''
        neuralHidden_global ='' 
        typeTrain_global = ''
        best_params_FFNN_global =''

        timeTrain_global=0
        timeTest_global=0
        totalTime_global=0

        self.comboBox_distancetype.setCurrentIndex(0)
        self.comboBox_percenttrain.setCurrentIndex(0)
        
        self.line_sizewindow.setText('')
        self.line_k.setText('')
        self.line_batchsize.setText('')
        self.line_epoch.setText('')
        self.line_hiddenlayer.setText('')
        self.line_neuralhidden.setText('')
        
        self.line_mseresult.setText('')
        self.line_rmseresult.setText('')
        self.line_maeresult.setText('')
        self.line_maperesult.setText('')
        
        self.line_timetestresult.setText('')
        self.line_timetrainresult.setText('')
        self.line_totaltime.setText('')

        self.figure.clear()
        self.canvas_plotpredict.draw()
        


    # Äá»c Dá»¯ Liá»u
    # @param   filePath     ÄÆ°á»ng dáº«n táº­p dá»¯ liá»u CSV
    # @return  df           Táº­p dá»¯ liá»u csv dÆ°á»i dáº¡ng df
    def readData(filePath):
        # Load dá»¯ liá»u
        dataCSV = pd.read_csv(filePath)
        df=dataCSV[['Close']]
        return df

    # Tiá»n Xá»­ lÃ½ Dá»¯ Liá»u
    # @param  Data   Táº­p dá»¯ liá»u
    # @return df     Dá»¯ liá»u ÄÃ£ ÄÆ°á»£c tiá»n xá»­ lÃ½
    def cleanData(df):
        # Replace null values with 0
        df.fillna(0, inplace=True)
        # Remove outliers by replacing values outside of 10 standard deviations with the mean
        std = df['Close'].std()
        mean = df['Close'].mean()
        df['Close'] = np.where(df['Close'] > (mean + 10*std), mean, df['Close'])
        df['Close'] = np.where(df['Close'] < (mean - 10*std), mean, df['Close'])
        # Scale data_AMZN to range [0, 1]
        scaler = MinMaxScaler()
        df['Close'] = scaler.fit_transform(df['Close'].values.reshape(-1, 1))
        # Fill in missing values with the mean of the previous and next values
        df['Close'] = df['Close'].interpolate(method='linear')
        return df

    # Chia dá»¯ liá»u thÃ nh train set vÃ  test set
    # @param  data                      Táº­p dá»¯ liá»u
    # @param  percentTrain              Tá»· lá» Táº­p train
    # @return train_data, test_data     Táº­p train vÃ  test   
    def splitData(data, percentTrain):
        train_size = int(len(data) * (percentTrain/100))
        train = data.iloc[:train_size, :]
        test = data.iloc[train_size:, :]
        return train, test

    # Xá»­ lÃ½ dá»¯ liá»u thÃ nh dá»¯ liá»u Äáº§u vÃ o vÃ  Äáº§u ra cho mÃ´ hÃ¬nh
    # @param      data            Dá»¯ liá»u cáº§n chia cá»­a sá»
    # @param      size_window     KÃ­ch thÆ°á»c cá»­a sá»
    # @param      size_predict    KÃ­ch thÆ°á»c cá»­a sá» dá»± ÄoÃ¡n
    # @param      stepWindow      sá» Äiá»m dá»¯ liá»u trÆ°á»£t
    # @return     X, y            máº£ng cá»­a sá» máº«u vÃ  máº£ng Äiá»m dá»± ÄoÃ¡n tÆ°Æ¡ng á»©ng
    def prepare_data(data, size_window, size_predict, stepWindow):
        X, y = [], []
        startWindow = 0
        for i in range(len(data) - size_window - 1):
            if (len(data[(startWindow + size_window):(startWindow + size_window + size_predict) , 0]) != size_predict):
                break
            X.append(data[startWindow:(startWindow + size_window), :])
            y.append(data[(startWindow + size_window):(startWindow + size_window + size_predict) , 0])
            startWindow += stepWindow
        return np.array(X), np.array(y)

    #---------KNN-----------
    # Fucntion TÃ­nh khoáº£ng cÃ¡ch giá»¯a 2 chuá»i thá»i gian
    # @param    ts1            Chuá»i thá»© nháº¥t
    # @param    ts2            Chuá»i thá»© hai
    # @return   euclidean      Khoáº£ng cÃ¡ch euclidean    
    def euclidean_distance(ts1, ts2):
        ts1= ts1.flatten()
        ts2= ts2.flatten()
        return euclidean(ts1,ts2)

    # Function láº¥y ra k chuá»i gáº§n nháº¥t
    # @param    k             Sá» lÆ°á»£ng chuá»i gáº§n nháº¥t
    # @param    distanceArr   Máº£ng khoáº£ng cÃ¡ch
    # @return   argsort       Vá» trÃ­ chuá»i gáº§n nháº¥t        
    def kSimilarityTimeSeries(k, distanceArr):
        distances = np.array(distanceArr)
        return distances.argsort()[:k] 

    # TÃ­nh khoáº£ng cÃ¡ch DTW
    # @param    ts1            Chuá»i thá»© nháº¥t
    # @param    ts2            Chuá»i thá»© hai
    # @return   euclidean      Khoáº£ng cÃ¡ch euclidean  
    def dtw_dist(ts1, ts2):
        dist, _, _, _ = dtw(ts1, ts2, dist=lambda ts1, ts2: np.abs(ts1 - ts2))
        return dist

    # ThÃªm Dá»¯ liá»u
    # @param    X_train               Cá»­a sá» máº«u train
    # @param    y_train               Cá»­a sá» dá»± ÄoÃ¡n train
    # @param    XTest                 Cá»­a sá» máº«u test
    # @param    yTest                 Cá»­a sá» dá»± ÄoÃ¡n test
    # @return   X_train, y_train      Khoáº£ng cÃ¡ch euclidean 
    def toTrain(X_train, y_train, XTest, yTest):
        X_train.append(XTest)
        y_train.append(yTest)
        return np.array(X_train), np.array(y_train)

    # Dá»± ÄoÃ¡n Euclidean
    # @param    nameData           TÃªn táº­p dá»¯ liá»u
    # @param    k                  Sá» lÆ°á»£ng chuá»i gáº§n nháº¥t
    # @param    typeDistance       Äá» Äo sá»­ dá»¥ng (Dtw, euclidean)
    # @param    X_train            Cá»­a sá» máº«u train
    # @param    y_train            Cá»­a sá» dá»± ÄoÃ¡n train
    # @param    X_test             Cá»­a sá» máº«u test
    # @param    y_test             Cá»­a sá» dá»± ÄoÃ¡n test
    # @return   y_pred_arr         Máº£ng dá»± ÄoÃ¡n
    def predict_KNN(k, typeDistance,size_window, X_train, y_train, X_test, y_test):
        y_pred_arr=[]
        for iTest in range(len(X_test)):
            if(k>len(X_train)):
                k=len(X_train)
            distanceArr=[]
            for iTrain in range(len(X_train)- size_window+2):
                if(typeDistance == 'Dtw'):
                    distance = Ui_MainWindow.dtw_dist(X_test[iTest],X_train[iTrain])
                else:
                    distance = Ui_MainWindow.euclidean_distance(X_test[iTest],X_train[iTrain])
                distanceArr.append(distance)
            indexKNN= Ui_MainWindow.kSimilarityTimeSeries(k,distanceArr)
            y_pred = np.mean(y_train[indexKNN])
            y_pred_arr.append(y_pred)
            X_train, y_train = Ui_MainWindow.toTrain(X_train.tolist(), y_train.tolist(),X_test[iTest].tolist(), y_test[iTest].tolist())
            y_pred = np.array(y_pred_arr)
    
        return y_pred


    #----------------FFNN--------------------------
    # Khá»i táº¡o mÃ´ hÃ¬nh FFNN
    # @param    neuralInput         KÃ­ch thÆ°á»c Cá»­a sá» máº«u/ sá» neural lá»p input
    # @param    num_layers_hidden   Sá» lÆ°á»£ng lá»p áº©n
    # @param    num_neural_hidden   Sá» neural lá»p áº©n
    # @param    neuralOutput         Sá» neural lá»p ouput
    # @return   model               MÃ´ hÃ¬nh FFNN
    def create_model_FFNN(neuralInput, num_layers_hidden=1, neuralHidden=1, neuralOutput=1):
        model = Sequential()
        for i in range(num_layers_hidden):
            if i == 0:
                model.add(Dense(neuralHidden, input_dim= neuralInput, activation='sigmoid'))
            else:
                model.add(Dense(neuralHidden, activation='sigmoid'))
        model.add(Dense(neuralOutput))
        model.compile(loss='mean_squared_error', optimizer='adam')
        return model


    # Train FFNN 
    # @param    nameData          TÃªn táº­p dá»¯ liá»u
    # @param    size_window       KÃ­ch thÆ°á»c Cá»­a sá» máº«u/ sá» neural lá»p input
    # @param    X_train           cá»­a sá» máº«u táº­p train
    # @param    y_train           Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @param    neuralHidden      Sá» neural lá»p áº©n
    # @param    numHiddenLayer    Sá» lá»p áº©n
    # @param    size_predict      KÃ­ch thÆ°á»c Cá»­a sá» dá»± ÄoÃ¡n/ Sá» neural lá»p ouput
    # @return   best_params_FFNN  Tham sá» tá»t nháº¥t cho mÃ´ hÃ¬nh FFNN                
    def train_FFNN(nameData, typePredict, size_window, X_train, y_train, neuralHidden, numHiddenLayer, size_predict):
        #param search
        param_grid_FFNN = {'batch_size': [8, 16, 32, 64, 128],
                'epochs': [50, 100, 150, 200, 250, 300],
                'neuralHidden': [neuralHidden],
                'num_layers_hidden' : [numHiddenLayer],
                'neuralInput' : [size_window],
                'neuralOutput' : [size_predict]}

        # create the model
        model_FFNN = KerasRegressor(build_fn=Ui_MainWindow.create_model_FFNN, verbose=0)
        
        # perform the grid search
        grid_FFNN = GridSearchCV(estimator=model_FFNN, param_grid=param_grid_FFNN, cv=3)
        grid_result_FFNN = grid_FFNN.fit(X_train, y_train)
        
        # train the model with the best parameters
        best_params_FFNN = grid_result_FFNN.best_params_
        
        model_FFNN = Ui_MainWindow.create_model_FFNN( best_params_FFNN['neuralInput'], best_params_FFNN['num_layers_hidden'], best_params_FFNN['neuralHidden'],best_params_FFNN['neuralOutput'])
        model_FFNN.fit(X_train, y_train, epochs=best_params_FFNN['epochs'], batch_size=best_params_FFNN['batch_size'], verbose=2, callbacks=[EarlyStopping(monitor='loss', patience=10)], shuffle=False)
        if(typePredict == 'FFNN'):
            model_FFNN.save_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(best_params_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(best_params_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(best_params_FFNN['batch_size']))+'_BatchSize_'+str(int(best_params_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   
        if(typePredict == 'SongSong' or typePredict == 'TuanTu'):
            model_FFNN.save_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(best_params_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(best_params_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(best_params_FFNN['batch_size']))+'_BatchSize_'+str(int(best_params_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   
        return best_params_FFNN



    # Train FFNN 
    # @param    nameData          TÃªn táº­p dá»¯ liá»u
    # @param    size_window       KÃ­ch thÆ°á»c Cá»­a sá» máº«u/ sá» neural lá»p input
    # @param    X_train           cá»­a sá» máº«u táº­p train
    # @param    y_train           Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @param    batchSize         Sá» lÆ°á»£ng máº«u ÄÆ°á»£c ÄÆ°a vÃ o vá»i má»i láº§n láº·p (epoch)
    # @param    epoch             Sá» láº§n láº·p cáº­p nháº­t trá»ng sá»
    # @param    neuralHidden      Sá» neural lá»p áº©n
    # @param    numHiddenLayer    Sá» lá»p áº©n
    # @param    size_predict      KÃ­ch thÆ°á»c Cá»­a sá» dá»± ÄoÃ¡n/ Sá» neural lá»p ouput
    # @return   best_params_FFNN  Tham sá» tá»t nháº¥t cho mÃ´ hÃ¬nh FFNN                
    def train_best_param_FFNN(nameData, typePredict, size_window, X_train, y_train, batchSize, epoch, neuralHidden, numHiddenLayer, size_predict):
        #param search
        param_grid_FFNN = {'batch_size': batchSize,
                'epochs': epoch,
                'neuralHidden': neuralHidden,
                'num_layers_hidden' : numHiddenLayer,
                'neuralInput' : size_window,
                'neuralOutput' : size_predict}

        model_FFNN = Ui_MainWindow.create_model_FFNN( param_grid_FFNN['neuralInput'], param_grid_FFNN['num_layers_hidden'], param_grid_FFNN['neuralHidden'],param_grid_FFNN['neuralOutput'])
        model_FFNN.fit(X_train, y_train, epochs=param_grid_FFNN['epochs'], batch_size=param_grid_FFNN['batch_size'], verbose=2, callbacks=[EarlyStopping(monitor='loss', patience=10)], shuffle=False)
        if(typePredict == 'FFNN'):
            model_FFNN.save_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(param_grid_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(param_grid_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(param_grid_FFNN['batch_size']))+'_BatchSize_'+str(int(param_grid_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   
        if(typePredict == 'SongSong'):
            model_FFNN.save_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window))+'_SizeWindow_'+str(int(param_grid_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(param_grid_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(param_grid_FFNN['batch_size']))+'_BatchSize_'+str(int(param_grid_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   

        if(typePredict == 'TuanTu'):
            model_FFNN.save_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(param_grid_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(param_grid_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(param_grid_FFNN['batch_size']))+'_BatchSize_'+str(int(param_grid_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   

        return param_grid_FFNN

    # Train FFNN 
    # @param    nameData          TÃªn táº­p dá»¯ liá»u
    # @param    size_window       KÃ­ch thÆ°á»c Cá»­a sá» máº«u/ sá» neural lá»p input
    # @param    X_train           cá»­a sá» máº«u táº­p train
    # @param    y_train           Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @param    neuralHidden      Sá» neural lá»p áº©n
    # @param    numHiddenLayer    Sá» lá»p áº©n
    # @param    size_predict      KÃ­ch thÆ°á»c Cá»­a sá» dá»± ÄoÃ¡n/ Sá» neural lá»p ouput
    # @return   best_params_FFNN  Tham sá» tá»t nháº¥t cho mÃ´ hÃ¬nh FFNN                
    def train_FFNN_not_save(nameData, size_window, X_train, y_train, neuralHidden, numHiddenLayer, size_predict):
        #param search
        param_grid_FFNN = {'batch_size': [8, 16, 32, 64, 128],
                'epochs': [50, 100, 150, 200, 250, 300],
                'neuralHidden': neuralHidden,
                'num_layers_hidden' : numHiddenLayer,
                'neuralInput' : [size_window],
                'neuralOutput' : [size_predict]}

        # create the model
        model_FFNN = KerasRegressor(build_fn=Ui_MainWindow.create_model_FFNN, verbose=0)
        
        # perform the grid search
        grid_FFNN = GridSearchCV(estimator=model_FFNN, param_grid=param_grid_FFNN, cv=3)
        grid_result_FFNN = grid_FFNN.fit(X_train, y_train)
        
        # train the model with the best parameters
        best_params_FFNN = grid_result_FFNN.best_params_
        return best_params_FFNN

    # Dá»± ÄoÃ¡n FFNN 
    # @param    nameData          TÃªn táº­p dá»¯ liá»u
    # @param    typePredict       Thá»±c hiá»n loáº¡i dá»± ÄoÃ¡n (FFNN_Find_NeuralHidden,FFNN_Find_NumberHiddenLayer,CombinePredict)
    # @param    X_train           cá»­a sá» máº«u táº­p train
    # @param    y_train           Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @param    X_test            Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @param    best_params_FFNN  Cá»­a sá» dá»± ÄoÃ¡n táº­p train
    # @return   predictions_FFNN  Máº£ng dá»± ÄoÃ¡n
    def predict_FFNN(nameData, typePredict, X_test, best_params_FFNN):
        model_FFNN1 = Sequential()
        for i in range(best_params_FFNN['num_layers_hidden']):
            if i == 0:
                model_FFNN1.add(Dense(best_params_FFNN['neuralHidden'], input_dim= best_params_FFNN['neuralInput'], activation='sigmoid'))
            else:
                model_FFNN1.add(Dense(best_params_FFNN['neuralHidden'], activation='sigmoid'))
        model_FFNN1.add(Dense(best_params_FFNN['neuralOutput']))
        if(typePredict == 'FFNN'):
            model_FFNN1.load_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(best_params_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(best_params_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(best_params_FFNN['batch_size']))+'_BatchSize_'+str(int(best_params_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   
        if(typePredict == 'SongSong' or typePredict == 'TuanTu'):
            model_FFNN1.load_weights('BestParam_QtDesigner/'+typePredict+'/'+nameData+'/FFNN_Find_BestWeights/'+str(int(percentTrain_global))+'_Train_'+str(int(size_window_global))+'_SizeWindow_'+str(int(best_params_FFNN['num_layers_hidden']))+'_HiddenLayer_'+str(int(best_params_FFNN['neuralHidden']))+'_NeuralHidden_'+str(int(best_params_FFNN['batch_size']))+'_BatchSize_'+str(int(best_params_FFNN['epochs']))+'_Epoch_'+nameData+'.h5')   

        model_FFNN1.compile(loss='mean_squared_error', optimizer='adam')
        
        predictions_FFNN = model_FFNN1.predict(X_test)
        return predictions_FFNN


    #---------------------Song Song------------------------------#

    # Lai GhÃ©p Song Song
    # @param    y_pred_FFNN     Máº£ng dá»± ÄoÃ¡n cá»§a FFNN
    # @param    y_pred_KNN      Máº£ng dá»± ÄoÃ¡n cá»§a KNN
    # @param    y_test          Máº£ng chuá»i thá»±c táº¿
    # @return   y_pred_combine  Máº£ng dá»± ÄoÃ¡n káº¿t há»£p
    def predictHybrid(y_pred_FFNN,y_pred_KNN,y_test):
        FFNNSubKNN=[]
        TestSubKNN=[]
        weightEl=[]
        for i in range(len(y_pred_FFNN)):
            FFNNSubKNN.append(y_pred_FFNN[i]-y_pred_KNN[i])
            TestSubKNN.append(y_test[i]-y_pred_KNN[i])

        for j in range(len(FFNNSubKNN)):
            weightEl.append(((FFNNSubKNN[j]*TestSubKNN[j])/ (FFNNSubKNN[j]*FFNNSubKNN[j])))
        
        weight = np.array(weightEl)
        
        y_pred_combine=[]
        for i in range(len(weight)):
            y_pred_combine.append(weight[i]*y_pred_FFNN[i]+(1-weight[i])*y_pred_KNN[i])
        y_pred_combine=np.array(y_pred_combine)
        return y_pred_combine

    #---------------------Tuáº§n Tá»±------------------------------#

    # TÃ­nh Lá»i Theo Tá»«ng NgÃ y
    # @param    y_pred_KNN      Máº£ng dá»± ÄoÃ¡n cá»§a KNN
    # @param    y_test          Máº£ng chuá»i thá»±c táº¿
    # @return   mseWithDay     Máº£ng lá»i theo ngÃ y
    def mseWithDay(y_pred_KNN, y_test):
        mseDay = []
        for i in range(len(y_pred_KNN)):
            mseDay.append([abs((y_test[i] - y_pred_KNN[i]))])
        mseDay=np.array(mseDay)
        return mseDay

    def predictSum(y_pred_mse,y_pred_KNN):
        pred_knn_ffnn=[]
        for i in range(len(y_pred_mse)):
            pred_knn_ffnn.append(y_pred_KNN[i]+y_pred_mse[i])
        pred_knn_ffnn=np.array(pred_knn_ffnn)
        return pred_knn_ffnn
    
    #load File
    def isFileExisted(self,path):
        return os.path.exists(path)
    

    def clearAllNotCSV(self):
        self.comboBox_distancetype.setCurrentIndex(0)
        self.line_k.setText('')
        
        self.line_sizewindow.setText('')
        self.comboBox_percenttrain.setCurrentIndex(0)

        self.line_batchsize.setText('')
        self.line_epoch.setText('')
        self.line_hiddenlayer.setText('')
        self.line_neuralhidden.setText('')
        
        self.line_mseresult.setText('')
        self.line_rmseresult.setText('')
        self.line_maeresult.setText('')
        self.line_maperesult.setText('')
        
        self.line_timetestresult.setText('')
        self.line_timetrainresult.setText('')
        self.line_totaltime.setText('')
        
    # Chá»n MÃ´ hÃ¬nh Äá» enable/disable input
    # @param   value tÃªn táº­p dá»¯ liá»u
    def selectDataset(self,value):
        self.figure.clear()
        self.canvas_plotcsv.draw()
        self.canvas_plotpredict.draw()

        if(value ==''):
            Ui_MainWindow.clearAll(self)
            self.comboBox_model.setEnabled(False)
            return

        self.comboBox_model.setEnabled(True)
        if(self.comboBox_model.currentText() != ''):
            Ui_MainWindow.selectModel(self, self.comboBox_model.currentText())

        filePath= '../Dataset/'+value+'.csv'
	    # plot data csv
        self.figure.clear()
        plt.title("Biá»u Äá» Táº­p Dá»¯ Liá»u "+value)
        plt.plot(Ui_MainWindow.readData(filePath), label= value+'Stock')
        plt.xlabel("NgÃ y")
        plt.ylabel("GiÃ¡ Cá» Phiáº¿u")
        plt.legend()
        self.canvas_plotcsv.draw()
		
    # Chá»n MÃ´ hÃ¬nh Äá» enable/disable input
    # @param   value tÃªn mÃ´ hÃ¬nh 
    def selectModel(self,value):
        global nameModel_global
        nameModel_global = value

        if(value=='K-Nearest Neighbours'):
            self.line_sizewindow.setText('7')
            self.comboBox_percenttrain.setCurrentIndex(1)

            if(self.comboBox_csv.currentText()=="AVAL"):
                self.line_k.setText('14')
                self.comboBox_distancetype.setCurrentIndex(2)
            elif(self.comboBox_csv.currentText()=="AGLE"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)
            elif(self.comboBox_csv.currentText()=="MDLY"):
                self.line_k.setText('3')
                self.comboBox_distancetype.setCurrentIndex(2)            
            elif(self.comboBox_csv.currentText()=="GDDY"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)

            self.line_batchsize.setText('')
            self.line_epoch.setText('')
            self.line_hiddenlayer.setText('')
            self.line_neuralhidden.setText('')

            self.comboBox_percenttrain.setEnabled(True)
            self.Button_test.setEnabled(True)
            self.Button_train.setEnabled(False)
            self.line_sizewindow.setEnabled(True)
            self.line_k.setEnabled(True)
            self.comboBox_distancetype.setEnabled(True)
            self.line_batchsize.setEnabled(False)
            self.line_epoch.setEnabled(False)
            self.line_hiddenlayer.setEnabled(False)
            self.line_neuralhidden.setEnabled(False)
            
        elif(value == 'Feedforward neural network'):
            self.line_sizewindow.setText('7')
            self.comboBox_percenttrain.setCurrentIndex(1)

            if(self.comboBox_csv.currentText()=="AVAL"):
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('14')
            elif(self.comboBox_csv.currentText()=="AGLE"):
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('13')
            elif(self.comboBox_csv.currentText()=="MDLY"):
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('17')      
            elif(self.comboBox_csv.currentText()=="GDDY"):
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('12')

            self.comboBox_distancetype.setCurrentIndex(0)
            self.line_k.setText('')
            self.comboBox_percenttrain.setEnabled(True)
            self.Button_test.setEnabled(False)
            self.Button_train.setEnabled(True)
            self.line_sizewindow.setEnabled(True)
            self.line_k.setEnabled(False)
            self.comboBox_distancetype.setEnabled(False)
            self.line_batchsize.setEnabled(True)
            self.line_epoch.setEnabled(True)
            self.line_hiddenlayer.setEnabled(True)
            self.line_neuralhidden.setEnabled(True)
        elif(value=='Lai GhÃ©p Song Song'):
            self.line_sizewindow.setText('7')
            self.comboBox_percenttrain.setCurrentIndex(1)

            if(self.comboBox_csv.currentText()=="AVAL"):
                self.line_k.setText('14')
                self.comboBox_distancetype.setCurrentIndex(2)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('14')
            elif(self.comboBox_csv.currentText()=="AGLE"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('13')
            elif(self.comboBox_csv.currentText()=="MDLY"):
                self.line_k.setText('3')
                self.comboBox_distancetype.setCurrentIndex(2)     
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('17')      
            elif(self.comboBox_csv.currentText()=="GDDY"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('12')
                
            self.comboBox_percenttrain.setEnabled(True)
            self.Button_test.setEnabled(False)
            self.Button_train.setEnabled(True)
            self.line_sizewindow.setEnabled(True)
            self.line_k.setEnabled(True)
            self.comboBox_distancetype.setEnabled(True)
            self.line_batchsize.setEnabled(True)
            self.line_epoch.setEnabled(True)
            self.line_hiddenlayer.setEnabled(True)
            self.line_neuralhidden.setEnabled(True)
        elif(value=='Lai GhÃ©p Tuáº§n Tá»±'):
            self.line_sizewindow.setText('7')
            self.comboBox_percenttrain.setCurrentIndex(1)

            if(self.comboBox_csv.currentText()=="AVAL"):
                self.line_k.setText('14')
                self.comboBox_distancetype.setCurrentIndex(2)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('14')
            elif(self.comboBox_csv.currentText()=="AGLE"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('200')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('13')
            elif(self.comboBox_csv.currentText()=="MDLY"):
                self.line_k.setText('3')
                self.comboBox_distancetype.setCurrentIndex(2)     
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('17')      
            elif(self.comboBox_csv.currentText()=="GDDY"):
                self.line_k.setText('5')
                self.comboBox_distancetype.setCurrentIndex(1)
                self.line_batchsize.setText('8')
                self.line_epoch.setText('300')
                self.line_hiddenlayer.setText('1')
                self.line_neuralhidden.setText('12')
                
            self.comboBox_percenttrain.setEnabled(True)
            self.Button_test.setEnabled(False)
            self.Button_train.setEnabled(True)
            self.line_sizewindow.setEnabled(True)
            self.line_k.setEnabled(True)
            self.comboBox_distancetype.setEnabled(True)
            self.line_batchsize.setEnabled(True)
            self.line_epoch.setEnabled(True)
            self.line_hiddenlayer.setEnabled(True)
            self.line_neuralhidden.setEnabled(True)
        else:
            Ui_MainWindow.clearAll(self)

            self.comboBox_percenttrain.setEnabled(False)
            self.Button_test.setEnabled(False)
            self.Button_train.setEnabled(False)
            self.line_sizewindow.setEnabled(False)
            self.line_k.setEnabled(False)
            self.comboBox_distancetype.setEnabled(False)
            self.line_batchsize.setEnabled(False)
            self.line_epoch.setEnabled(False)
            self.line_hiddenlayer.setEnabled(False)
            self.line_neuralhidden.setEnabled(False)

    # Xuáº¥t Lá»i
    # @param   error thÃ´ng tin lá»i  
    def message(self,error):
        msg= QMessageBox()
        msg.setWindowTitle("Message Error!")
        msg.setText(error)
        msg.exec()

    # Tá»n Táº¡i Tham Sá» Tá»«ng Dá»± ÄoÃ¡n
    def messageLoadFile(self, typeTrain):
        dlg = QMessageBox()
        dlg.setText("CÃ¡c Tham Sá» cá»§a "+ str(typeTrain)+ " ÄÃ£ Tá»«ng ÄÆ°á»£c Dá»± ÄoÃ¡n, CÃ³ Muá»n Load Láº¡i KhÃ´ng?")
        dlg.setWindowTitle("Load Predict")
        dlg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        dlg.setIcon(QMessageBox.Icon.Question)
        button = dlg.exec()

        if button == QMessageBox.StandardButton.Yes:
            return True
        return False


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1110, 669)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.fame_input = QtWidgets.QFrame(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fame_input.sizePolicy().hasHeightForWidth())
        self.fame_input.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.fame_input.setFont(font)
        self.fame_input.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fame_input.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fame_input.setObjectName("fame_input")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.fame_input)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_knn = QtWidgets.QFrame(parent=self.fame_input)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_knn.setFont(font)
        self.frame_knn.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_knn.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_knn.setObjectName("frame_knn")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_knn)
        self.verticalLayout_10.setObjectName("verticalLayout_10")

        self.frame_csv = QtWidgets.QFrame(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_csv.sizePolicy().hasHeightForWidth())
        self.frame_csv.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_csv.setFont(font)
        self.frame_csv.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_csv.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_csv.setObjectName("frame_csv")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_csv)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_csv = QtWidgets.QLabel(parent=self.frame_csv)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_csv.sizePolicy().hasHeightForWidth())
        self.label_csv.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_csv.setFont(font)
        self.label_csv.setObjectName("label_csv")
        self.horizontalLayout_9.addWidget(self.label_csv)
        self.comboBox_csv = QtWidgets.QComboBox(parent=self.frame_csv)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_csv.sizePolicy().hasHeightForWidth())
        self.comboBox_csv.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.comboBox_csv.setFont(font)
        self.comboBox_csv.setObjectName("comboBox_csv")
        self.comboBox_csv.addItem("")
        self.comboBox_csv.setItemText(0, "")
        self.comboBox_csv.addItem("")
        self.comboBox_csv.addItem("")
        self.comboBox_csv.addItem("")
        self.comboBox_csv.addItem("")
        self.horizontalLayout_9.addWidget(self.comboBox_csv)
        self.verticalLayout_10.addWidget(self.frame_csv)
        
        self.frame_model = QtWidgets.QFrame(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_model.sizePolicy().hasHeightForWidth())
        self.frame_model.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_model.setFont(font)
        self.frame_model.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_model.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_model.setObjectName("frame_model")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_model)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_model = QtWidgets.QLabel(parent=self.frame_model)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_model.sizePolicy().hasHeightForWidth())
        self.label_model.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_model.setFont(font)
        self.label_model.setObjectName("label_model")
        self.horizontalLayout_8.addWidget(self.label_model)
        self.comboBox_model = QtWidgets.QComboBox(parent=self.frame_model)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_model.sizePolicy().hasHeightForWidth())
        self.comboBox_model.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.comboBox_model.setFont(font)
        self.comboBox_model.setObjectName("comboBox_model")
        self.comboBox_model.addItem("")
        self.comboBox_model.setItemText(0, "")
        self.comboBox_model.addItem("")
        self.comboBox_model.addItem("")
        self.comboBox_model.addItem("")
        self.comboBox_model.addItem("")
        self.horizontalLayout_8.addWidget(self.comboBox_model)
        self.verticalLayout_10.addWidget(self.frame_model)
        self.frame_percenttrain = QtWidgets.QFrame(parent=self.frame_knn)
        self.frame_percenttrain.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_percenttrain.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_percenttrain.setObjectName("frame_percenttrain")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.frame_percenttrain)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.label_percenttrain = QtWidgets.QLabel(parent=self.frame_percenttrain)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_percenttrain.sizePolicy().hasHeightForWidth())
        self.label_percenttrain.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_percenttrain.setFont(font)
        self.label_percenttrain.setObjectName("label_percenttrain")
        self.horizontalLayout_19.addWidget(self.label_percenttrain)
        self.comboBox_percenttrain = QtWidgets.QComboBox(parent=self.frame_percenttrain)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_csv.sizePolicy().hasHeightForWidth())
        self.comboBox_csv.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.comboBox_percenttrain.setFont(font)
        self.comboBox_percenttrain.setObjectName("comboBox_percenttrain")
        self.comboBox_percenttrain.addItem("")
        self.comboBox_percenttrain.setItemText(0, "")
        self.comboBox_percenttrain.addItem("")
        self.comboBox_percenttrain.addItem("")
        self.horizontalLayout_19.addWidget(self.comboBox_percenttrain)
        self.verticalLayout_10.addWidget(self.frame_percenttrain)
        self.frame_sizewindow = QtWidgets.QFrame(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_sizewindow.sizePolicy().hasHeightForWidth())
        self.frame_sizewindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_sizewindow.setFont(font)
        self.frame_sizewindow.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_sizewindow.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_sizewindow.setObjectName("frame_sizewindow")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_sizewindow)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_sizewindow = QtWidgets.QLabel(parent=self.frame_sizewindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_sizewindow.sizePolicy().hasHeightForWidth())
        self.label_sizewindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_sizewindow.setFont(font)
        self.label_sizewindow.setObjectName("label_sizewindow")
        self.horizontalLayout_10.addWidget(self.label_sizewindow)
        self.line_sizewindow = QtWidgets.QLineEdit(parent=self.frame_sizewindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_sizewindow.sizePolicy().hasHeightForWidth())
        self.line_sizewindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_sizewindow.setFont(font)
        self.line_sizewindow.setText("")
        self.line_sizewindow.setObjectName("line_sizewindow")
        self.horizontalLayout_10.addWidget(self.line_sizewindow)
        self.verticalLayout_10.addWidget(self.frame_sizewindow)
        self.label_modelknn = QtWidgets.QLabel(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_modelknn.sizePolicy().hasHeightForWidth())
        self.label_modelknn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_modelknn.setFont(font)
        self.label_modelknn.setObjectName("label_modelknn")
        self.verticalLayout_10.addWidget(self.label_modelknn)
        self.frame_k = QtWidgets.QFrame(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_k.sizePolicy().hasHeightForWidth())
        self.frame_k.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_k.setFont(font)
        self.frame_k.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_k.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_k.setObjectName("frame_k")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_k)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_k = QtWidgets.QLabel(parent=self.frame_k)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_k.sizePolicy().hasHeightForWidth())
        self.label_k.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_k.setFont(font)
        self.label_k.setObjectName("label_k")
        self.horizontalLayout_11.addWidget(self.label_k)
        self.line_k = QtWidgets.QLineEdit(parent=self.frame_k)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_k.sizePolicy().hasHeightForWidth())
        self.line_k.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_k.setFont(font)
        self.line_k.setText("")
        self.line_k.setObjectName("line_k")
        self.horizontalLayout_11.addWidget(self.line_k)
        self.verticalLayout_10.addWidget(self.frame_k)
        self.frame_distancetype = QtWidgets.QFrame(parent=self.frame_knn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_distancetype.sizePolicy().hasHeightForWidth())
        self.frame_distancetype.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_distancetype.setFont(font)
        self.frame_distancetype.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_distancetype.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_distancetype.setObjectName("frame_distancetype")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_distancetype)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_distancetype = QtWidgets.QLabel(parent=self.frame_distancetype)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_distancetype.sizePolicy().hasHeightForWidth())
        self.label_distancetype.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_distancetype.setFont(font)
        self.label_distancetype.setObjectName("label_distancetype")
        self.horizontalLayout_12.addWidget(self.label_distancetype)
        self.comboBox_distancetype = QtWidgets.QComboBox(parent=self.frame_distancetype)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_distancetype.sizePolicy().hasHeightForWidth())
        self.comboBox_distancetype.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.comboBox_distancetype.setFont(font)
        self.comboBox_distancetype.setObjectName("comboBox_distancetype")
        self.comboBox_distancetype.addItem("")
        self.comboBox_distancetype.setItemText(0, "")
        self.comboBox_distancetype.addItem("")
        self.comboBox_distancetype.addItem("")
        self.horizontalLayout_12.addWidget(self.comboBox_distancetype)
        self.verticalLayout_10.addWidget(self.frame_distancetype)
        self.verticalLayout.addWidget(self.frame_knn)
        self.frame_modelffnn = QtWidgets.QFrame(parent=self.fame_input)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_modelffnn.setFont(font)
        self.frame_modelffnn.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_modelffnn.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_modelffnn.setObjectName("frame_modelffnn")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.frame_modelffnn)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_13 = QtWidgets.QFrame(parent=self.frame_modelffnn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_13.sizePolicy().hasHeightForWidth())
        self.frame_13.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_13.setFont(font)
        self.frame_13.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_13.setObjectName("frame_13")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.frame_13)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_modelffnn = QtWidgets.QLabel(parent=self.frame_13)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_modelffnn.setFont(font)
        self.label_modelffnn.setObjectName("label_modelffnn")
        self.verticalLayout_8.addWidget(self.label_modelffnn)
        self.verticalLayout_7.addWidget(self.frame_13)
        self.frame_batchsize = QtWidgets.QFrame(parent=self.frame_modelffnn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_batchsize.sizePolicy().hasHeightForWidth())
        self.frame_batchsize.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_batchsize.setFont(font)
        self.frame_batchsize.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_batchsize.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_batchsize.setObjectName("frame_batchsize")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_batchsize)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_batchsize = QtWidgets.QLabel(parent=self.frame_batchsize)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_batchsize.sizePolicy().hasHeightForWidth())
        self.label_batchsize.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_batchsize.setFont(font)
        self.label_batchsize.setObjectName("label_batchsize")
        self.horizontalLayout_4.addWidget(self.label_batchsize)
        self.line_batchsize = QtWidgets.QLineEdit(parent=self.frame_batchsize)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_batchsize.sizePolicy().hasHeightForWidth())
        self.line_batchsize.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_batchsize.setFont(font)
        self.line_batchsize.setText("")
        self.line_batchsize.setMaxLength(32)
        self.line_batchsize.setObjectName("line_batchsize")
        self.horizontalLayout_4.addWidget(self.line_batchsize)
        self.verticalLayout_7.addWidget(self.frame_batchsize)
        self.frame_epoch = QtWidgets.QFrame(parent=self.frame_modelffnn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_epoch.sizePolicy().hasHeightForWidth())
        self.frame_epoch.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_epoch.setFont(font)
        self.frame_epoch.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_epoch.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_epoch.setObjectName("frame_epoch")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_epoch)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_epoch = QtWidgets.QLabel(parent=self.frame_epoch)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_epoch.sizePolicy().hasHeightForWidth())
        self.label_epoch.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_epoch.setFont(font)
        self.label_epoch.setObjectName("label_epoch")
        self.horizontalLayout_5.addWidget(self.label_epoch)
        self.line_epoch = QtWidgets.QLineEdit(parent=self.frame_epoch)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_epoch.sizePolicy().hasHeightForWidth())
        self.line_epoch.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_epoch.setFont(font)
        self.line_epoch.setText("")
        self.line_epoch.setObjectName("line_epoch")
        self.horizontalLayout_5.addWidget(self.line_epoch)
        self.verticalLayout_7.addWidget(self.frame_epoch)
        self.frame_hiddenlayer = QtWidgets.QFrame(parent=self.frame_modelffnn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_hiddenlayer.sizePolicy().hasHeightForWidth())
        self.frame_hiddenlayer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_hiddenlayer.setFont(font)
        self.frame_hiddenlayer.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_hiddenlayer.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_hiddenlayer.setObjectName("frame_hiddenlayer")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_hiddenlayer)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_hiddenlayer = QtWidgets.QLabel(parent=self.frame_hiddenlayer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_hiddenlayer.sizePolicy().hasHeightForWidth())
        self.label_hiddenlayer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_hiddenlayer.setFont(font)
        self.label_hiddenlayer.setObjectName("label_hiddenlayer")
        self.horizontalLayout_6.addWidget(self.label_hiddenlayer)
        self.line_hiddenlayer = QtWidgets.QLineEdit(parent=self.frame_hiddenlayer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_hiddenlayer.sizePolicy().hasHeightForWidth())
        self.line_hiddenlayer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_hiddenlayer.setFont(font)
        self.line_hiddenlayer.setText("")
        self.line_hiddenlayer.setObjectName("line_hiddenlayer")
        self.horizontalLayout_6.addWidget(self.line_hiddenlayer)
        self.verticalLayout_7.addWidget(self.frame_hiddenlayer)
        self.frame_neuralhidden = QtWidgets.QFrame(parent=self.frame_modelffnn)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_neuralhidden.sizePolicy().hasHeightForWidth())
        self.frame_neuralhidden.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_neuralhidden.setFont(font)
        self.frame_neuralhidden.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_neuralhidden.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_neuralhidden.setObjectName("frame_neuralhidden")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_neuralhidden)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_neuralhidden = QtWidgets.QLabel(parent=self.frame_neuralhidden)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_neuralhidden.sizePolicy().hasHeightForWidth())
        self.label_neuralhidden.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_neuralhidden.setFont(font)
        self.label_neuralhidden.setObjectName("label_neuralhidden")
        self.horizontalLayout_7.addWidget(self.label_neuralhidden)
        self.line_neuralhidden = QtWidgets.QLineEdit(parent=self.frame_neuralhidden)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_neuralhidden.sizePolicy().hasHeightForWidth())
        self.line_neuralhidden.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_neuralhidden.setFont(font)
        self.line_neuralhidden.setText("")
        self.line_neuralhidden.setObjectName("line_neuralhidden")
        self.horizontalLayout_7.addWidget(self.line_neuralhidden)
        self.verticalLayout_7.addWidget(self.frame_neuralhidden)
        self.verticalLayout.addWidget(self.frame_modelffnn)
        self.frame_traintest = QtWidgets.QFrame(parent=self.fame_input)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_traintest.setFont(font)
        self.frame_traintest.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_traintest.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_traintest.setObjectName("frame_traintest")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_traintest)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.Button_train = QtWidgets.QPushButton(parent=self.frame_traintest, clicked = lambda: self.plotOnTrain())
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Button_train.setFont(font)
        self.Button_train.setObjectName("Button_train")
        self.verticalLayout_9.addWidget(self.Button_train)
        self.Button_test = QtWidgets.QPushButton(parent=self.frame_traintest, clicked = lambda: self.plotOnTest())
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Button_test.setFont(font)
        self.Button_test.setObjectName("Button_test")
        self.verticalLayout_9.addWidget(self.Button_test)
        self.Button_clear = QtWidgets.QPushButton(parent=self.frame_traintest, clicked = lambda: self.clearAll())
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.Button_clear.setFont(font)
        self.Button_clear.setObjectName("Button_clear")
        self.verticalLayout_9.addWidget(self.Button_clear)
        self.verticalLayout.addWidget(self.frame_traintest)
        self.horizontalLayout.addWidget(self.fame_input)
        self.frame_output = QtWidgets.QFrame(parent=self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_output.setFont(font)
        self.frame_output.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_output.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_output.setObjectName("frame_output")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_output)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_plotcsv = QtWidgets.QFrame(parent=self.frame_output)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_plotcsv.sizePolicy().hasHeightForWidth())
        self.frame_plotcsv.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_plotcsv.setFont(font)
        self.frame_plotcsv.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_plotcsv.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_plotcsv.setObjectName("frame_plotcsv")
        self.verticalLayout_2.addWidget(self.frame_plotcsv)
        self.frame_plotpredict = QtWidgets.QFrame(parent=self.frame_output)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_plotpredict.sizePolicy().hasHeightForWidth())
        self.frame_plotpredict.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_plotpredict.setFont(font)
        self.frame_plotpredict.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_plotpredict.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_plotpredict.setObjectName("frame_plotpredict")
        self.verticalLayout_2.addWidget(self.frame_plotpredict)
        self.frame_showdetail = QtWidgets.QFrame(parent=self.frame_output)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_showdetail.setFont(font)
        self.frame_showdetail.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_showdetail.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_showdetail.setObjectName("frame_showdetail")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_showdetail)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.frame_showdetail)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame.setFont(font)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_mse = QtWidgets.QFrame(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_mse.setFont(font)
        self.frame_mse.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_mse.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_mse.setObjectName("frame_mse")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_mse)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_mseresult = QtWidgets.QLabel(parent=self.frame_mse)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_mseresult.sizePolicy().hasHeightForWidth())
        self.label_mseresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_mseresult.setFont(font)
        self.label_mseresult.setObjectName("label_mseresult")
        self.horizontalLayout_3.addWidget(self.label_mseresult)
        self.line_mseresult = QtWidgets.QLineEdit(parent=self.frame_mse)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_mseresult.sizePolicy().hasHeightForWidth())
        self.line_mseresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_mseresult.setFont(font)
        self.line_mseresult.setReadOnly(True)
        self.line_mseresult.setObjectName("line_mseresult")
        self.horizontalLayout_3.addWidget(self.line_mseresult)
        self.verticalLayout_3.addWidget(self.frame_mse)
        self.frame_timetrain = QtWidgets.QFrame(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_timetrain.setFont(font)
        self.frame_timetrain.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_timetrain.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_timetrain.setObjectName("frame_timetrain")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.frame_timetrain)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.label_timetrainresult = QtWidgets.QLabel(parent=self.frame_timetrain)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_timetrainresult.sizePolicy().hasHeightForWidth())
        self.label_timetrainresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_timetrainresult.setFont(font)
        self.label_timetrainresult.setObjectName("label_timetrainresult")
        self.horizontalLayout_18.addWidget(self.label_timetrainresult)
        self.line_timetrainresult = QtWidgets.QLineEdit(parent=self.frame_timetrain)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_timetrainresult.sizePolicy().hasHeightForWidth())
        self.line_timetrainresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_timetrainresult.setFont(font)
        self.line_timetrainresult.setReadOnly(True)
        self.line_timetrainresult.setObjectName("line_timetrainresult")
        self.horizontalLayout_18.addWidget(self.line_timetrainresult)
        self.verticalLayout_3.addWidget(self.frame_timetrain)
        self.horizontalLayout_2.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(parent=self.frame_showdetail)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_2.setFont(font)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_rmse = QtWidgets.QFrame(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_rmse.setFont(font)
        self.frame_rmse.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_rmse.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_rmse.setObjectName("frame_rmse")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.frame_rmse)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_rmseresult = QtWidgets.QLabel(parent=self.frame_rmse)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_rmseresult.sizePolicy().hasHeightForWidth())
        self.label_rmseresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_rmseresult.setFont(font)
        self.label_rmseresult.setObjectName("label_rmseresult")
        self.horizontalLayout_13.addWidget(self.label_rmseresult)
        self.line_rmseresult = QtWidgets.QLineEdit(parent=self.frame_rmse)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_rmseresult.sizePolicy().hasHeightForWidth())
        self.line_rmseresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_rmseresult.setFont(font)
        self.line_rmseresult.setReadOnly(True)
        self.line_rmseresult.setObjectName("line_rmseresult")
        self.horizontalLayout_13.addWidget(self.line_rmseresult)
        self.verticalLayout_4.addWidget(self.frame_rmse)
        self.frame_timetest = QtWidgets.QFrame(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_timetest.setFont(font)
        self.frame_timetest.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_timetest.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_timetest.setObjectName("frame_timetest")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.frame_timetest)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_timetestresult = QtWidgets.QLabel(parent=self.frame_timetest)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_timetestresult.sizePolicy().hasHeightForWidth())
        self.label_timetestresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_timetestresult.setFont(font)
        self.label_timetestresult.setObjectName("label_timetestresult")
        self.horizontalLayout_17.addWidget(self.label_timetestresult)
        self.line_timetestresult = QtWidgets.QLineEdit(parent=self.frame_timetest)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_timetestresult.sizePolicy().hasHeightForWidth())
        self.line_timetestresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_timetestresult.setFont(font)
        self.line_timetestresult.setText("")
        self.line_timetestresult.setReadOnly(True)
        self.line_timetestresult.setObjectName("line_timetestresult")
        self.horizontalLayout_17.addWidget(self.line_timetestresult)
        self.verticalLayout_4.addWidget(self.frame_timetest)
        self.horizontalLayout_2.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(parent=self.frame_showdetail)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_3.setFont(font)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_mae = QtWidgets.QFrame(parent=self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_mae.setFont(font)
        self.frame_mae.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_mae.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_mae.setObjectName("frame_mae")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_mae)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_maeresult = QtWidgets.QLabel(parent=self.frame_mae)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_maeresult.sizePolicy().hasHeightForWidth())
        self.label_maeresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_maeresult.setFont(font)
        self.label_maeresult.setObjectName("label_maeresult")
        self.horizontalLayout_14.addWidget(self.label_maeresult)
        self.line_maeresult = QtWidgets.QLineEdit(parent=self.frame_mae)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_maeresult.sizePolicy().hasHeightForWidth())
        self.line_maeresult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_maeresult.setFont(font)
        self.line_maeresult.setReadOnly(True)
        self.line_maeresult.setObjectName("line_maeresult")
        self.horizontalLayout_14.addWidget(self.line_maeresult)
        self.verticalLayout_5.addWidget(self.frame_mae)
        self.frame_totaltime = QtWidgets.QFrame(parent=self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_totaltime.setFont(font)
        self.frame_totaltime.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_totaltime.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_totaltime.setObjectName("frame_totaltime")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.frame_totaltime)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_totaltime = QtWidgets.QLabel(parent=self.frame_totaltime)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_totaltime.sizePolicy().hasHeightForWidth())
        self.label_totaltime.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_totaltime.setFont(font)
        self.label_totaltime.setObjectName("label_totaltime")
        self.horizontalLayout_16.addWidget(self.label_totaltime)
        self.line_totaltime = QtWidgets.QLineEdit(parent=self.frame_totaltime)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_totaltime.sizePolicy().hasHeightForWidth())
        self.line_totaltime.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_totaltime.setFont(font)
        self.line_totaltime.setText("")
        self.line_totaltime.setReadOnly(True)
        self.line_totaltime.setObjectName("line_totaltime")
        self.horizontalLayout_16.addWidget(self.line_totaltime)
        self.verticalLayout_5.addWidget(self.frame_totaltime)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(parent=self.frame_showdetail)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_4.setFont(font)
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_mape = QtWidgets.QFrame(parent=self.frame_4)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_mape.setFont(font)
        self.frame_mape.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_mape.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_mape.setObjectName("frame_mape")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.frame_mape)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_maperesult = QtWidgets.QLabel(parent=self.frame_mape)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_maperesult.sizePolicy().hasHeightForWidth())
        self.label_maperesult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setWeight(75)
        self.label_maperesult.setFont(font)
        self.label_maperesult.setObjectName("label_maperesult")
        self.horizontalLayout_15.addWidget(self.label_maperesult)
        self.line_maperesult = QtWidgets.QLineEdit(parent=self.frame_mape)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_maperesult.sizePolicy().hasHeightForWidth())
        self.line_maperesult.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.line_maperesult.setFont(font)
        self.line_maperesult.setReadOnly(True)
        self.line_maperesult.setObjectName("line_maperesult")
        self.horizontalLayout_15.addWidget(self.line_maperesult)
        self.verticalLayout_6.addWidget(self.frame_mape)
        self.frame_empty = QtWidgets.QFrame(parent=self.frame_4)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.frame_empty.setFont(font)
        self.frame_empty.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_empty.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_empty.setObjectName("frame_empty")
        self.verticalLayout_6.addWidget(self.frame_empty)
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.verticalLayout_2.addWidget(self.frame_showdetail)
        self.horizontalLayout.addWidget(self.frame_output)
        MainWindow.setCentralWidget(self.centralwidget)
		
        # #Create a horizontal layout
        self.horizontalLayout_plotcsv = QtWidgets.QHBoxLayout(self.frame_plotcsv)
        self.horizontalLayout_plotcsv.setObjectName("horizontalLayout_plotcsv")
        # Cavas Here
        self.figure = plt.figure()
        self.canvas_plotcsv = FigureCanvas(self.figure)
        # End of Canvas
        # Add Canvas
        self.horizontalLayout_plotcsv.addWidget(self.canvas_plotcsv)
        # End of horizontal layout

        #Create a horizontal layout
        self.horizontalLayout_plotpredict = QtWidgets.QHBoxLayout(self.frame_plotpredict)
        self.horizontalLayout_plotpredict.setObjectName("horizontalLayout_plotpredict")
        # Cavas Here
        self.canvas_plotpredict = FigureCanvas(self.figure)
        # End of Canvas
        # Add Canvas
        self.horizontalLayout_plotpredict.addWidget(self.canvas_plotpredict)
        # End of horizontal layout
        self.comboBox_model.setEnabled(False)
        self.comboBox_percenttrain.setEnabled(False)
        self.Button_test.setEnabled(False)
        self.Button_train.setEnabled(False)
        self.line_sizewindow.setEnabled(False)
        self.line_k.setEnabled(False)
        self.comboBox_distancetype.setEnabled(False)
        self.line_batchsize.setEnabled(False)
        self.line_epoch.setEnabled(False)
        self.line_hiddenlayer.setEnabled(False)
        self.line_neuralhidden.setEnabled(False)

        self.comboBox_model.currentTextChanged.connect(self.selectModel)
        self.comboBox_csv.currentTextChanged.connect(self.selectDataset)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Predict Combine KNN with FFNN"))
        self.label_model.setText(_translate("MainWindow", "MÃ´ HÃ¬nh: "))
        self.comboBox_model.setItemText(1, _translate("MainWindow", "K-Nearest Neighbours"))
        self.comboBox_model.setItemText(2, _translate("MainWindow", "Feedforward neural network"))
        self.comboBox_model.setItemText(3, _translate("MainWindow", "Lai GhÃ©p Song Song"))
        self.comboBox_model.setItemText(4, _translate("MainWindow", "Lai GhÃ©p Tuáº§n Tá»±"))
        self.label_csv.setText(_translate("MainWindow", "Táº­p Dá»¯ Liá»u:"))
        self.comboBox_csv.setItemText(1, _translate("MainWindow", "AVAL"))
        self.comboBox_csv.setItemText(2, _translate("MainWindow", "AGLE"))
        self.comboBox_csv.setItemText(3, _translate("MainWindow", "MDLY"))
        self.comboBox_csv.setItemText(4, _translate("MainWindow", "GDDY"))
        
        self.label_percenttrain.setText(_translate("MainWindow", "Tá»· Lá» Táº­p Train : Test"))
        self.comboBox_percenttrain.setItemText(1, _translate("MainWindow", "80 : 20"))
        self.comboBox_percenttrain.setItemText(2, _translate("MainWindow", "70 : 30"))

        self.label_sizewindow.setText(_translate("MainWindow", "Size Window:"))
        self.label_modelknn.setText(_translate("MainWindow", "Tham Sá» Äáº§u VÃ o KNN:"))
        self.label_k.setText(_translate("MainWindow", "K:                   "))
        self.label_distancetype.setText(_translate("MainWindow", "Äá» Äo:          "))
        self.comboBox_distancetype.setItemText(1, _translate("MainWindow", "Euclidean"))
        self.comboBox_distancetype.setItemText(2, _translate("MainWindow", "Dtw"))
        self.label_modelffnn.setText(_translate("MainWindow", "Tham Sá» Äáº§u VÃ o FFNN:"))
        self.label_batchsize.setText(_translate("MainWindow", "Batch Size:"))
        self.label_epoch.setText(_translate("MainWindow", "Epoch:         "))
        self.label_hiddenlayer.setText(_translate("MainWindow", "Hidden Layer No:"))
        self.label_neuralhidden.setText(_translate("MainWindow", "Hidden Neural No: "))
        self.Button_train.setText(_translate("MainWindow", "Train"))
        self.Button_test.setText(_translate("MainWindow", "Test"))
        self.Button_clear.setText(_translate("MainWindow", "Clear Input"))
        self.label_mseresult.setText(_translate("MainWindow", "MSE:"))
        self.label_timetrainresult.setText(_translate("MainWindow", "Time Train:"))
        self.label_rmseresult.setText(_translate("MainWindow", "RMSE:"))
        self.label_timetestresult.setText(_translate("MainWindow", "Time Test:"))
        self.label_maeresult.setText(_translate("MainWindow", "MAE:"))
        self.label_totaltime.setText(_translate("MainWindow", "Total Time:"))
        self.label_maperesult.setText(_translate("MainWindow", "MAPE:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
